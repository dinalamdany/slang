Semantic checking
General gist:
-1 function symbol table since function decls only allowed outside main, so whenever a function is parsed, just check global_func_table
-1 master global variable table global_var_table
-each init and always block have variable symbol tables var_symbol_table
--CANNOT NEST
-each for, while, if have variable symbol tables var_symbol_table --> nested
--CAN NEST!

paradigm:
-if a variable is being declared, add it to the symbol table
-if a variable is beink invoked, recursively check up the symbol table to master global

check each node in the tree for the desired consistency:


bootleg ocaml code:

(*  *)

let check_stmt_list = function
	[] -> []
	| h::t -> check_stmt h; check_stmt_list t

let check_stmt = function
	Declaration(x) -> find x else error
	| Assign(ident, expr) -> match type of ident with type of expr else
	| ArrAssign (ident, expr_list) -> match type of ident with type of each expr 
	...
	| Call(ident, expr_list) -> find ident in func_table + match expr_list w/ expr_list

let check_expr
	IntLit(x) -> Sast.Int(x), Types.Int
	| ...
	| Variable(x) -> 
. 
.
.

let check_program env (func_list, main) = function
	check_funcs funclist;
	check_main main;